//Подключение шрифта
@mixin font($font_name, $file_name, $weight, $style) {
	@font-face {
		font-family: $font_name;
		font-display: swap;
		src: url("../fonts/#{$file_name}.woff2") format("woff2"), url("../fonts/#{$file_name}.woff") format("woff");
		font-weight: #{$weight};
		font-style: #{$style};
	}
}
//Адаптивное свойство
@mixin adaptiv-value($property, $startSize, $minSize, $type) {
	$addSize: $startSize - $minSize;
	@if $type==1 {
		//Только если меньше контейнера
		#{$property}: $startSize + px;
		@media (max-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
		}
	} @else if $type==2 {
		//Только если больше контейнера
		#{$property}: $startSize + px;
		@media (min-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
		}
	} @else {
		//Всегда
		#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
	}
}
//Адаптивное свойство до
@mixin adaptiv-value-to($property, $startSize, $minSize, $minWidth) {
	$addSize: $startSize - $minSize;
	//#{$property}: $minSize + px;
	@media (min-width: #{$minWidth + px}) {
		#{$property}: calc(#{$minSize + px} + #{$addSize} * (((100vw - #{$minWidth + px})) / ((#{$maxWidth - $minWidth}))));
	}
}

//Функция по добавлению data svg
@function svg-url($svg) {
	//
	//  Add missing namespace
	//
	@if not str-index($svg, xmlns) {
		$svg: str-replace($svg, "<svg", '<svg xmlns="http://www.w3.org/2000/svg"');
	}

	//
	//  Chunk up string in order to avoid
	//  "stack level too deep" error
	//
	$encoded: "";
	$slice: 2000;
	$index: 0;
	$loops: ceil(str-length($svg) / $slice);

	@for $i from 1 through $loops {
		$chunk: str-slice($svg, $index, $index + $slice - 1);
		//
		//   Encode
		//
		$chunk: str-replace($chunk, '"', "'");
		$chunk: str-replace($chunk, "%", "%25");
		$chunk: str-replace($chunk, "#", "%23");
		$chunk: str-replace($chunk, "{", "%7B");
		$chunk: str-replace($chunk, "}", "%7D");
		$chunk: str-replace($chunk, "<", "%3C");
		$chunk: str-replace($chunk, ">", "%3E");

		//
		//    The maybe list
		//
		//    Keep size and compile time down
		//    ... only add on documented fail
		//
		//  $chunk: str-replace($chunk, '&', '%26');
		//  $chunk: str-replace($chunk, '|', '%7C');
		//  $chunk: str-replace($chunk, '[', '%5B');
		//  $chunk: str-replace($chunk, ']', '%5D');
		//  $chunk: str-replace($chunk, '^', '%5E');
		//  $chunk: str-replace($chunk, '`', '%60');
		//  $chunk: str-replace($chunk, ';', '%3B');
		//  $chunk: str-replace($chunk, '?', '%3F');
		//  $chunk: str-replace($chunk, ':', '%3A');
		//  $chunk: str-replace($chunk, '@', '%40');
		//  $chunk: str-replace($chunk, '=', '%3D');

		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice;
	}

	@return url("data:image/svg+xml,#{$encoded}");
}

//  Background svg mixin
@mixin background-svg($svg) {
	background-image: svg-url($svg);
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);
	@return if(
									$index,
									str-slice($string, 1, $index - 1) + $replace +
			str-replace(
				str-slice($string, $index + str-length($search)),
				$search,
				$replace
			),
									$string
	);
}
